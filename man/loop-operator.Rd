% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loop-operator.R
\name{loop-operator}
\alias{loop-operator}
\alias{\%m>\%}
\alias{\%f>\%}
\alias{loop_options}
\title{Map operator}
\usage{
lhs \%m>\% rhs

lhs \%f>\% rhs

loop_options(...)
}
\arguments{
\item{lhs}{a list; typically a list of data.frame-like objects handled with
standard dplyr methods}

\item{rhs}{a pipeline in curly brackets}
}
\value{
list of processed data.frame-like objects
}
\description{
Can be considered as a syntactic sugar for a solution
combining \code{purrr::map} and \code{dplyr}/\code{magrittr} pipeline.

Optionaly, you can specify additional arguments adding
a \code{loop_options} call as a first expression in
the curly brackets. It should not be followed by
\verb{\%>\%}, because it will not work. For now now,
\code{loop_options} is only used to pass arguments for
\code{furrr::future_map}, like:

loop_options(.progress = TRUE)
}
\examples{
library(dplyr)
library(looplyr)

# Simple map
two_dfs <- list(cars, mtcars) \%m>\% {
  mutate(idx = 1:n())
}

# Parallel future_map
two_dfs <- list(cars, mtcars) \%f>\% {
  loop_options(.progress = TRUE)
  mutate(idx = 1:n())
}

}
